{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","lastPage","Math","ceil","pages","isCurrentFirst","isCurrentLast","className","href","onClick","map","page","items","App","useState","setCurrentPage","itemsPerPage","setItemsPerPage","startItem","endItem","visibleItems","slice","id","value","onChange","event","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"mKAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCGIG,EAAwB,SAAC,GAK/B,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAWC,KAAKC,KAAKN,EAAQC,GAC7BM,EAAQd,EAAW,EAAGW,GACtBI,EAAiC,IAAhBN,EACjBO,EAAgBP,IAAgBE,EAEtC,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAS,oBAAeF,GAAkB,YAA9C,SACE,mBACE,UAAQ,WACRE,UAAU,YACVC,KAAI,WAAMJ,EAAML,EAAc,IAC9B,gBAAeM,EACfI,QAAS,WACFJ,GACHL,EAAaD,EAAc,IAPjC,oBAeDK,EAAMM,KAAI,SAAAC,GAAI,OACb,oBAAeJ,UAAS,oBAAeI,IAASZ,GAAe,UAA/D,SACE,mBACE,UAAQ,WACRQ,UAAU,YACVC,KAAI,WAAMG,GACVF,QAAS,kBAAMT,EAAaW,IAJ9B,SAMGA,KAPIA,MAYX,oBAAIJ,UAAS,oBAAeD,GAAiB,YAA7C,SACE,mBACE,UAAQ,WACRC,UAAU,YACVC,KAAI,WAAMJ,EAAML,EAAc,IAC9B,gBAAeO,EACfG,QAAS,WACFH,GACHN,EAAaD,EAAc,IAPjC,wBC9CFa,EAAQtB,EAAW,EAFN,IAEqBoB,KAAI,SAAAhB,GAAC,qBAAYA,MAE5CmB,EAAU,WACrB,MAAsCC,mBAAS,GAA/C,mBAAOf,EAAP,KAAoBgB,EAApB,KACA,EAAwCD,mBALd,GAK1B,mBAAOE,EAAP,KAAqBC,EAArB,KAEMC,GAAanB,EAAc,GAAKiB,EAChCG,EAAUpB,EAAciB,EATb,GAUbjB,EAAciB,EAVD,GAYXI,EAAeR,EAAMS,MAAMH,EAAWC,GAO5C,OACE,sBAAKZ,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiCmB,EAAY,EAD7C,cACoDC,EADpD,eAvBa,GAuBb,OAIA,sBAAKZ,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRe,GAAG,kBACHf,UAAU,eACVgB,MAAOP,EACPQ,SApBW,SAACC,GACpBV,EAAe,GACfE,GAAiBQ,EAAMC,OAAOH,QAaxB,UAOE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBpB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAjDW,GAkDXC,QAASkB,EACTjB,YAAaA,EACbC,aAAce,IAGhB,6BACGK,EAAaV,KAAI,SAAAkB,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC3DnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.e3939b37.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import { FC } from 'react';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const lastPage = Math.ceil(total / perPage);\n  const pages = getNumbers(1, lastPage);\n  const isCurrentFirst = currentPage === 1;\n  const isCurrentLast = currentPage === lastPage;\n\n  return (\n    <ul className=\"pagination\">\n      <li className={`page-item ${isCurrentFirst && 'disabled'}`}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href={`#${pages[currentPage - 1]}`}\n          aria-disabled={isCurrentFirst}\n          onClick={() => {\n            if (!isCurrentFirst) {\n              onPageChange(currentPage - 1);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(page => (\n        <li key={page} className={`page-item ${page === currentPage && 'active'}`}>\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={`page-item ${isCurrentLast && 'disabled'}`}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href={`#${pages[currentPage + 1]}`}\n          aria-disabled={isCurrentLast}\n          onClick={() => {\n            if (!isCurrentLast) {\n              onPageChange(currentPage + 1);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import { ChangeEvent, FC, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst itemsTotal = 42;\nconst itemsPerPageDefault = 5;\nconst items = getNumbers(1, itemsTotal).map(n => `Item ${n}`);\n\nexport const App: FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(itemsPerPageDefault);\n\n  const startItem = (currentPage - 1) * itemsPerPage;\n  const endItem = currentPage * itemsPerPage < itemsTotal\n    ? currentPage * itemsPerPage\n    : itemsTotal;\n  const visibleItems = items.slice(startItem, endItem);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setCurrentPage(1);\n    setItemsPerPage(+event.target.value);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItem + 1} - ${endItem} of ${itemsTotal})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={handleChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={itemsTotal}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li key={item} data-cy=\"item\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}